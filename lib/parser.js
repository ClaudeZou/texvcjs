/* jshint latedef: nofunc */
"use strict";
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    /*jshint validthis:true, newcap:false */
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(t) { console.assert(t instanceof ast.LList); return t.toArray(); },
        peg$c2 = [],
        peg$c3 = /^[ \t\n\r]/,
        peg$c4 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c5 = function(e) { return e; },
        peg$c6 = function(e1, name, e2) { return ast.LList(ast.Tex.INFIX(name, e1.toArray(), e2.toArray())); },
        peg$c7 = function(e1, f, e2) { return ast.LList(ast.Tex.INFIXh(f[0], f[1], e1.toArray(), e2.toArray()));},
        peg$c8 = function() { return ast.LList.EMPTY; },
        peg$c9 = function(h, t) { return ast.LList(h, t); },
        peg$c10 = function(d, e) { return ast.LList(ast.Tex.DECLh(d[0], d[1], e.toArray())); },
        peg$c11 = function(l1, l2) { return ast.Tex.FQ(l1[0], l1[1], l2); },
        peg$c12 = function(l1, l2) { return ast.Tex.FQ(l1[0], l2, l1[1]); },
        peg$c13 = function(base, upi) { return ast.Tex.UQ(base, upi); },
        peg$c14 = function(base, downi) { return ast.Tex.DQ(base, downi); },
        peg$c15 = function() { return ast.Tex.LITERAL(sq_close_ri); },
        peg$c16 = function(l, e) { return ast.LList(l, e); },
        peg$c17 = function(l1, l2) { return ast.Tex.FQN(l1[0], l2); },
        peg$c18 = function(l) { return ast.Tex.UQN(l); },
        peg$c19 = function(l) { return ast.Tex.DQN(l); },
        peg$c20 = function(d) { return d; },
        peg$c21 = function() { return sq_close_ri; },
        peg$c22 = function(r) { return ast.Tex.LITERAL(r); },
        peg$c23 = function(b, r) { return ast.Tex.BIG(b, r); },
        peg$c24 = function(b) { return ast.Tex.BIG(b, sq_close_ri); },
        peg$c25 = function(l, e, r) { return ast.Tex.LR(l, r, e.toArray()); },
        peg$c26 = function(name, e, l) { return ast.Tex.FUN2sq(name, ast.Tex.CURLY(e.toArray()), l); },
        peg$c27 = function(name, l) { return ast.Tex.FUN1(name, l); },
        peg$c28 = function(name, l) { return ast.Tex.FUN1nb(name, l); },
        peg$c29 = function(f, l) { return ast.Tex.FUN1hl(f[0], f[1], l); },
        peg$c30 = function(f, l) { return ast.Tex.FUN1hf(f[0], f[1], l); },
        peg$c31 = function(name, l1, l2) { return ast.Tex.FUN2(name, l1, l2); },
        peg$c32 = function(name, l1, l2) { return ast.Tex.FUN2nb(name, l1, l2); },
        peg$c33 = function(f, l1, l2) { return ast.Tex.FUN2h(f[0], f[1], l1, l2); },
        peg$c34 = function(e) { return ast.Tex.CURLY(e.toArray()); },
        peg$c35 = function(e1, name, e2) { return ast.Tex.INFIX(name, e1.toArray(), e2.toArray()); },
        peg$c36 = function(e1, f, e2) { return ast.Tex.INFIXh(f[0], f[1], e1.toArray(), e2.toArray()); },
        peg$c37 = function(m) { return ast.Tex.MATRIX("matrix", lst2arr(m)); },
        peg$c38 = function(m) { return ast.Tex.MATRIX("pmatrix", lst2arr(m)); },
        peg$c39 = function(m) { return ast.Tex.MATRIX("bmatrix", lst2arr(m)); },
        peg$c40 = function(m) { return ast.Tex.MATRIX("Bmatrix", lst2arr(m)); },
        peg$c41 = function(m) { return ast.Tex.MATRIX("vmatrix", lst2arr(m)); },
        peg$c42 = function(m) { return ast.Tex.MATRIX("Vmatrix", lst2arr(m)); },
        peg$c43 = function(m) { return ast.Tex.MATRIX("array", lst2arr(m)); },
        peg$c44 = function(m) { return ast.Tex.MATRIX("aligned", lst2arr(m)); },
        peg$c45 = function(m) { return ast.Tex.MATRIX("alignedat", lst2arr(m)); },
        peg$c46 = function(m) { return ast.Tex.MATRIX("smallmatrix", lst2arr(m)); },
        peg$c47 = function(m) { return ast.Tex.MATRIX("cases", lst2arr(m)); },
        peg$c48 = "\\begin{",
        peg$c49 = { type: "literal", value: "\\begin{", description: "\"\\\\begin{\"" },
        peg$c50 = "}",
        peg$c51 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c52 = function() { throw new SyntaxError("Illegal TeX function", [], text(), offset(), line(), column()); },
        peg$c53 = function(f) { return !all_functions[f]; },
        peg$c54 = void 0,
        peg$c55 = function(f) { throw new SyntaxError("Illegal TeX function", [], f, offset(), line(), column()); },
        peg$c56 = null,
        peg$c57 = function(m) { return m; },
        peg$c58 = function(l, tail) { return { head: lst2arr(l), tail: tail }; },
        peg$c59 = function(l) { return l; },
        peg$c60 = function(e, tail) { return { head: e.toArray(), tail: tail }; },
        peg$c61 = /^[a-zA-Z]/,
        peg$c62 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c63 = /^[0-9]/,
        peg$c64 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c65 = /^[,:;?!']/,
        peg$c66 = { type: "class", value: "[,:;?!']", description: "[,:;?!']" },
        peg$c67 = /^[().]/,
        peg$c68 = { type: "class", value: "[().]", description: "[().]" },
        peg$c69 = /^[\-+*=]/,
        peg$c70 = { type: "class", value: "[\\-+*=]", description: "[\\-+*=]" },
        peg$c71 = /^[\/|]/,
        peg$c72 = { type: "class", value: "[\\/|]", description: "[\\/|]" },
        peg$c73 = /^[\-0-9a-zA-Z+*,=():\/;?.!'` \x80-\xFF]/,
        peg$c74 = { type: "class", value: "[\\-0-9a-zA-Z+*,=():\\/;?.!'` \\x80-\\xFF]", description: "[\\-0-9a-zA-Z+*,=():\\/;?.!'` \\x80-\\xFF]" },
        peg$c75 = function(b) { return box_functions[b]; },
        peg$c76 = "{",
        peg$c77 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c78 = function(b, cs) { return ast.Tex.BOX(b, cs.join('')); },
        peg$c79 = "-",
        peg$c80 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c81 = function(c) { return ast.RenderT.TEX_ONLY(c); },
        peg$c82 = function(f) { return latex_function_names[f]; },
        peg$c83 = "(",
        peg$c84 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c85 = "[",
        peg$c86 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c87 = "\\{",
        peg$c88 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
        peg$c89 = function() { return " ";},
        peg$c90 = function(f, c) { return ast.RenderT.TEX_ONLY(f + c); },
        peg$c91 = function(f) { return mediawiki_function_names[f]; },
        peg$c92 = function(f, c) { return ast.RenderT.TEX_ONLY("\\operatorname {" + f.slice(1) + "}" + c); },
        peg$c93 = function(f) { return other_literals1[f]; },
        peg$c94 = function(f) { return ast.RenderT.TEX_ONLY(f + " "); },
        peg$c95 = function(f) { return other_literals2[f]; },
        peg$c96 = function(f) { return ast.RenderT.TEX_ONLY("\\mbox{" + f + "} "); },
        peg$c97 = function(mbox) { return mbox === "\\mbox"; },
        peg$c98 = function(mbox, f) { return other_literals2[f]; },
        peg$c99 = function(mbox, f) { return ast.RenderT.TEX_ONLY("\\mbox{" + f + "} "); },
        peg$c100 = function(f) { return other_literals3[f]; },
        peg$c101 = function(f) { return ast.RenderT.TEX_ONLY(other_literals3[f] + " "); },
        peg$c102 = "\\",
        peg$c103 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c104 = /^[, ;!_#%$&]/,
        peg$c105 = { type: "class", value: "[, ;!_#%$&]", description: "[, ;!_#%$&]" },
        peg$c106 = function(c) { return ast.RenderT.TEX_ONLY("\\" + c); },
        peg$c107 = /^[><~]/,
        peg$c108 = { type: "class", value: "[><~]", description: "[><~]" },
        peg$c109 = /^[%$]/,
        peg$c110 = { type: "class", value: "[%$]", description: "[%$]" },
        peg$c111 = function(c) { return ast.RenderT.TEX_ONLY("\\" + c); /* escape dangerous chars */},
        peg$c112 = /^[{}|]/,
        peg$c113 = { type: "class", value: "[{}|]", description: "[{}|]" },
        peg$c114 = function(f) { return other_delimiters1[f]; },
        peg$c115 = function(f) { return other_delimiters2[f]; },
        peg$c116 = function(f) { return ast.RenderT.TEX_ONLY(other_delimiters2[f] + " "); },
        peg$c117 = function(f) { return fun_ar1nb[f]; },
        peg$c118 = function(f) { return f; },
        peg$c119 = function(f) { return fun_ar1opt[f]; },
        peg$c120 = "&",
        peg$c121 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c122 = "\\\\",
        peg$c123 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c124 = "\\begin{matrix}",
        peg$c125 = { type: "literal", value: "\\begin{matrix}", description: "\"\\\\begin{matrix}\"" },
        peg$c126 = "\\end{matrix}",
        peg$c127 = { type: "literal", value: "\\end{matrix}", description: "\"\\\\end{matrix}\"" },
        peg$c128 = "\\begin{pmatrix}",
        peg$c129 = { type: "literal", value: "\\begin{pmatrix}", description: "\"\\\\begin{pmatrix}\"" },
        peg$c130 = "\\end{pmatrix}",
        peg$c131 = { type: "literal", value: "\\end{pmatrix}", description: "\"\\\\end{pmatrix}\"" },
        peg$c132 = "\\begin{bmatrix}",
        peg$c133 = { type: "literal", value: "\\begin{bmatrix}", description: "\"\\\\begin{bmatrix}\"" },
        peg$c134 = "\\end{bmatrix}",
        peg$c135 = { type: "literal", value: "\\end{bmatrix}", description: "\"\\\\end{bmatrix}\"" },
        peg$c136 = "\\begin{Bmatrix}",
        peg$c137 = { type: "literal", value: "\\begin{Bmatrix}", description: "\"\\\\begin{Bmatrix}\"" },
        peg$c138 = "\\end{Bmatrix}",
        peg$c139 = { type: "literal", value: "\\end{Bmatrix}", description: "\"\\\\end{Bmatrix}\"" },
        peg$c140 = "\\begin{vmatrix}",
        peg$c141 = { type: "literal", value: "\\begin{vmatrix}", description: "\"\\\\begin{vmatrix}\"" },
        peg$c142 = "\\end{vmatrix}",
        peg$c143 = { type: "literal", value: "\\end{vmatrix}", description: "\"\\\\end{vmatrix}\"" },
        peg$c144 = "\\begin{Vmatrix}",
        peg$c145 = { type: "literal", value: "\\begin{Vmatrix}", description: "\"\\\\begin{Vmatrix}\"" },
        peg$c146 = "\\end{Vmatrix}",
        peg$c147 = { type: "literal", value: "\\end{Vmatrix}", description: "\"\\\\end{Vmatrix}\"" },
        peg$c148 = "\\begin{array}",
        peg$c149 = { type: "literal", value: "\\begin{array}", description: "\"\\\\begin{array}\"" },
        peg$c150 = "\\end{array}",
        peg$c151 = { type: "literal", value: "\\end{array}", description: "\"\\\\end{array}\"" },
        peg$c152 = "\\begin{align}",
        peg$c153 = { type: "literal", value: "\\begin{align}", description: "\"\\\\begin{align}\"" },
        peg$c154 = "\\end{align}",
        peg$c155 = { type: "literal", value: "\\end{align}", description: "\"\\\\end{align}\"" },
        peg$c156 = "\\begin{alignat}",
        peg$c157 = { type: "literal", value: "\\begin{alignat}", description: "\"\\\\begin{alignat}\"" },
        peg$c158 = "\\end{alignat}",
        peg$c159 = { type: "literal", value: "\\end{alignat}", description: "\"\\\\end{alignat}\"" },
        peg$c160 = "\\begin{smallmatrix}",
        peg$c161 = { type: "literal", value: "\\begin{smallmatrix}", description: "\"\\\\begin{smallmatrix}\"" },
        peg$c162 = "\\end{smallmatrix}",
        peg$c163 = { type: "literal", value: "\\end{smallmatrix}", description: "\"\\\\end{smallmatrix}\"" },
        peg$c164 = "\\begin{cases}",
        peg$c165 = { type: "literal", value: "\\begin{cases}", description: "\"\\\\begin{cases}\"" },
        peg$c166 = "\\end{cases}",
        peg$c167 = { type: "literal", value: "\\end{cases}", description: "\"\\\\end{cases}\"" },
        peg$c168 = "]",
        peg$c169 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c170 = "^",
        peg$c171 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c172 = "_",
        peg$c173 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c174 = function() { return text(); },
        peg$c175 = function(f) { return big_literals[f]; },
        peg$c176 = function(f) { return fun_ar1[f]; },
        peg$c177 = function(f) { return other_fun_ar1[f]; },
        peg$c178 = function(f) { return fun_ar2[f]; },
        peg$c179 = function(f) { return fun_infix[f]; },
        peg$c180 = function(f) { return declh_function[f]; },
        peg$c181 = function(f) { return ast.Tex.DECLh(f, ast.FontForce.RM(), []); /*see bug 54818*/ },
        peg$c182 = function(f) { return fun_ar2nb[f]; },
        peg$c183 = function(f) { return left_function[f]; },
        peg$c184 = function(f) { return right_function[f]; },
        peg$c185 = function() { return false; },
        peg$c186 = function() { return peg$currPos === input.length; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$cache = {},
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1 ?
          expectedDescs.slice(0, -1).join(", ") +
              " or " +
              expectedDescs[expected.length - 1] :
          expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 0,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetex_expr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      var key    = peg$currPos * 75 + 1,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = [];
      if (peg$c3.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c3.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsetex_expr() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 75 + 2,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOF();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c5(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsene_expr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFUN_INFIX();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsene_expr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEOF();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsene_expr();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseimpossible();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsene_expr();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseEOF();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c7(s1, s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1;

      var key    = peg$currPos * 75 + 3,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parsene_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c8();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsene_expr() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 4,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselit_aq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselitsq_aq();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c9(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDECLh();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexpr();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c10(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselitsq_aq() {
      var s0;

      var key    = peg$currPos * 75 + 5,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parselitsq_fq();
      if (s0 === peg$FAILED) {
        s0 = peg$parselitsq_dq();
        if (s0 === peg$FAILED) {
          s0 = peg$parselitsq_uq();
          if (s0 === peg$FAILED) {
            s0 = peg$parselitsq_zq();
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselitsq_fq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 6,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselitsq_dq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUP();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselitsq_uq();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSUB();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselit();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c12(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselitsq_uq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 7,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselitsq_zq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUP();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselitsq_dq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 8,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselitsq_zq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUB();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselitsq_zq() {
      var s0, s1;

      var key    = peg$currPos * 75 + 9,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSQ_CLOSE();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c15();
      }
      s0 = s1;

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseexpr_nosqc() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 10,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselit_aq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr_nosqc();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c16(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c8();
        }
        s0 = s1;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_aq() {
      var s0;

      var key    = peg$currPos * 75 + 11,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$parselit_fq();
      if (s0 === peg$FAILED) {
        s0 = peg$parselit_dq();
        if (s0 === peg$FAILED) {
          s0 = peg$parselit_uq();
          if (s0 === peg$FAILED) {
            s0 = peg$parselit_dqn();
            if (s0 === peg$FAILED) {
              s0 = peg$parselit_uqn();
              if (s0 === peg$FAILED) {
                s0 = peg$parselit();
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_fq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 12,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselit_dq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUP();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselit_uq();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSUB();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselit();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c12(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselit_dqn();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSUP();
            if (s2 !== peg$FAILED) {
              s3 = peg$parselit();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_uq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 13,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUP();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_dq() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 14,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parselit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUB();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_uqn() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 15,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSUP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselit();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit_dqn() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 16,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseSUB();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselit();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c19(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseleft() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 17,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseLEFT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELIMITER();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLEFT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQ_CLOSE();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c21();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseright() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 18,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseRIGHT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDELIMITER();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRIGHT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSQ_CLOSE();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c21();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parselit() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 75 + 19,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseLITERAL();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c22(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDELIMITER();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c22(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBIG();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDELIMITER();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c23(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseBIG();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseSQ_CLOSE();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseleft();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseexpr();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseright();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c25(s1, s2, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseFUN_AR1opt();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseexpr_nosqc();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseSQ_CLOSE();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parselit();
                      if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c26(s1, s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseFUN_AR1();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parselit();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c27(s1, s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseFUN_AR1nb();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parselit();
                      if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c28(s1, s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseimpossible();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parselit();
                        if (s2 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c29(s1, s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseimpossible();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parselit();
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c30(s1, s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseFUN_AR2();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parselit();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parselit();
                              if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c31(s1, s2, s3);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseFUN_AR2nb();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parselit();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parselit();
                                if (s3 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c32(s1, s2, s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseimpossible();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parselit();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parselit();
                                  if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c33(s1, s2, s3);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseBOX();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseCURLY_OPEN();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseexpr();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseCURLY_CLOSE();
                                      if (s3 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c34(s2);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseCURLY_OPEN();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsene_expr();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseFUN_INFIX();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parsene_expr();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseCURLY_CLOSE();
                                            if (s5 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c35(s2, s3, s4);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseCURLY_OPEN();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsene_expr();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseimpossible();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parsene_expr();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parseCURLY_CLOSE();
                                              if (s5 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c36(s2, s3, s4);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseBEGIN_MATRIX();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsematrix();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseEND_MATRIX();
                                            if (s3 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c37(s2);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseBEGIN_PMATRIX();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsematrix();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseEND_PMATRIX();
                                              if (s3 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c38(s2);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseBEGIN_BMATRIX();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsematrix();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseEND_BMATRIX();
                                                if (s3 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c39(s2);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseBEGIN_BBMATRIX();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsematrix();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseEND_BBMATRIX();
                                                  if (s3 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c40(s2);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseBEGIN_VMATRIX();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsematrix();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseEND_VMATRIX();
                                                    if (s3 !== peg$FAILED) {
                                                      peg$reportedPos = s0;
                                                      s1 = peg$c41(s2);
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseBEGIN_VVMATRIX();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parsematrix();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseEND_VVMATRIX();
                                                      if (s3 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c42(s2);
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseBEGIN_ARRAY();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parsematrix();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parseEND_ARRAY();
                                                        if (s3 !== peg$FAILED) {
                                                          peg$reportedPos = s0;
                                                          s1 = peg$c43(s2);
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseBEGIN_ALIGN();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsematrix();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parseEND_ALIGN();
                                                          if (s3 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c44(s2);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseBEGIN_ALIGNAT();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsematrix();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseEND_ALIGNAT();
                                                            if (s3 !== peg$FAILED) {
                                                              peg$reportedPos = s0;
                                                              s1 = peg$c45(s2);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseBEGIN_SMALLMATRIX();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsematrix();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parseEND_SMALLMATRIX();
                                                              if (s3 !== peg$FAILED) {
                                                                peg$reportedPos = s0;
                                                                s1 = peg$c46(s2);
                                                                s0 = s1;
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseBEGIN_CASES();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsematrix();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseEND_CASES();
                                                                if (s3 !== peg$FAILED) {
                                                                  peg$reportedPos = s0;
                                                                  s1 = peg$c47(s2);
                                                                  s0 = s1;
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              if (input.substr(peg$currPos, 7) === peg$c48) {
                                                                s1 = peg$c48;
                                                                peg$currPos += 7;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = [];
                                                                s3 = peg$parsealpha();
                                                                if (s3 !== peg$FAILED) {
                                                                  while (s3 !== peg$FAILED) {
                                                                    s2.push(s3);
                                                                    s3 = peg$parsealpha();
                                                                  }
                                                                } else {
                                                                  s2 = peg$c0;
                                                                }
                                                                if (s2 !== peg$FAILED) {
                                                                  if (input.charCodeAt(peg$currPos) === 125) {
                                                                    s3 = peg$c50;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s3 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c51); }
                                                                  }
                                                                  if (s3 !== peg$FAILED) {
                                                                    peg$reportedPos = s0;
                                                                    s1 = peg$c52();
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parsegeneric_func();
                                                                if (s1 !== peg$FAILED) {
                                                                  peg$reportedPos = peg$currPos;
                                                                  s2 = peg$c53(s1);
                                                                  if (s2) {
                                                                    s2 = peg$c54;
                                                                  } else {
                                                                    s2 = peg$c0;
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    peg$reportedPos = s0;
                                                                    s1 = peg$c55(s1);
                                                                    s0 = s1;
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsematrix() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 75 + 20,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseline();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNEXT_ROW();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsematrix();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c57(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c56;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 75 + 21,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNEXT_CELL();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseline();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c59(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c56;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsealpha() {
      var s0;

      var key    = peg$currPos * 75 + 22,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c61.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseliteral_id() {
      var s0;

      var key    = peg$currPos * 75 + 23,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c61.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseliteral_mn() {
      var s0;

      var key    = peg$currPos * 75 + 24,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c63.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseliteral_uf_lt() {
      var s0;

      var key    = peg$currPos * 75 + 25,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c65.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedelimiter_uf_lt() {
      var s0;

      var key    = peg$currPos * 75 + 26,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c67.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseliteral_uf_op() {
      var s0;

      var key    = peg$currPos * 75 + 27,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c69.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsedelimiter_uf_op() {
      var s0;

      var key    = peg$currPos * 75 + 28,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c71.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseboxchars() {
      var s0;

      var key    = peg$currPos * 75 + 29,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      if (peg$c73.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBOX() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 75 + 30,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c75(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c76;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseboxchars();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseboxchars();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c50;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c78(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLITERAL() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 75 + 31,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseliteral_id();
      if (s1 === peg$FAILED) {
        s1 = peg$parseliteral_mn();
        if (s1 === peg$FAILED) {
          s1 = peg$parseliteral_uf_lt();
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c79;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parseliteral_uf_op();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s2 = peg$c82(s1);
          if (s2) {
            s2 = peg$c54;
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s4 = peg$c83;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                  s4 = peg$c85;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c86); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c87) {
                    s4 = peg$c87;
                    peg$currPos += 2;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = [];
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c89();
                    }
                    s4 = s5;
                  }
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c90(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsegeneric_func();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s2 = peg$c91(s1);
            if (s2) {
              s2 = peg$c54;
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s4 = peg$c83;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c84); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 91) {
                    s4 = peg$c85;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c87) {
                      s4 = peg$c87;
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c88); }
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$currPos;
                      s5 = [];
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c89();
                      }
                      s4 = s5;
                    }
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c92(s1, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsegeneric_func();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s2 = peg$c93(s1);
              if (s2) {
                s2 = peg$c54;
              } else {
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c94(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsegeneric_func();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s2 = peg$c95(s1);
                if (s2) {
                  s2 = peg$c54;
                } else {
                  s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c96(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsegeneric_func();
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = peg$currPos;
                  s2 = peg$c97(s1);
                  if (s2) {
                    s2 = peg$c54;
                  } else {
                    s2 = peg$c0;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s4 = peg$c76;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c77); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsegeneric_func();
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = peg$currPos;
                          s6 = peg$c98(s1, s5);
                          if (s6) {
                            s6 = peg$c54;
                          } else {
                            s6 = peg$c0;
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (s7 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s8 = peg$c50;
                                peg$currPos++;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c51); }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parse_();
                                if (s9 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c99(s1, s5);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsegeneric_func();
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s2 = peg$c100(s1);
                    if (s2) {
                      s2 = peg$c54;
                    } else {
                      s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c101(s1);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c102;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (peg$c104.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c105); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c106(s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (peg$c107.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c108); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c81(s1);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (peg$c109.test(input.charAt(peg$currPos))) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c110); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c111(s1);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDELIMITER() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 32,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsedelimiter_uf_lt();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedelimiter_uf_op();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c85;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c86); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c81(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c102;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c112.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c113); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c106(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsegeneric_func();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s2 = peg$c114(s1);
            if (s2) {
              s2 = peg$c54;
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c94(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsegeneric_func();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s2 = peg$c115(s1);
              if (s2) {
                s2 = peg$c54;
              } else {
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c116(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_AR1nb() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 33,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c117(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_AR1opt() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 75 + 34,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c119(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c85;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c118(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNEXT_CELL() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 35,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c120;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNEXT_ROW() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 36,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_MATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 37,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c124) {
        s1 = peg$c124;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_MATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 38,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c126) {
        s1 = peg$c126;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_PMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 39,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_PMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 40,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c130) {
        s1 = peg$c130;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_BMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 41,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c132) {
        s1 = peg$c132;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_BMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 42,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c134) {
        s1 = peg$c134;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_BBMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 43,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_BBMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 44,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c138) {
        s1 = peg$c138;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_VMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 45,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_VMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 46,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c142) {
        s1 = peg$c142;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_VVMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 47,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c144) {
        s1 = peg$c144;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_VVMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 48,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_ARRAY() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 49,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_ARRAY() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 50,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c150) {
        s1 = peg$c150;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_ALIGN() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 51,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c152) {
        s1 = peg$c152;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_ALIGN() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 52,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c154) {
        s1 = peg$c154;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_ALIGNAT() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 53,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c156) {
        s1 = peg$c156;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_ALIGNAT() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 54,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_SMALLMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 55,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c160) {
        s1 = peg$c160;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_SMALLMATRIX() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 56,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 17) === peg$c162) {
        s1 = peg$c162;
        peg$currPos += 17;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBEGIN_CASES() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 57,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEND_CASES() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 58,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c166) {
        s1 = peg$c166;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSQ_CLOSE() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 59,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c168;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCURLY_OPEN() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 60,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseCURLY_CLOSE() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 61,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c50;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSUP() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 62,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c170;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSUB() {
      var s0, s1, s2;

      var key    = peg$currPos * 75 + 63,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c172;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsegeneric_func() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 64,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c102;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsealpha();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsealpha();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c174();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBIG() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 65,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c175(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_AR1() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 66,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c176(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s2 = peg$c177(s1);
          if (s2) {
            s2 = peg$c54;
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c177(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_AR2() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 67,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c178(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_INFIX() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 68,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c179(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDECLh() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 69,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c180(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c181(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseFUN_AR2nb() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 70,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c182(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLEFT() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 71,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c183(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRIGHT() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 75 + 72,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c184(s1);
        if (s2) {
          s2 = peg$c54;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseimpossible() {
      var s0;

      var key    = peg$currPos * 75 + 73,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$reportedPos = peg$currPos;
      s0 = peg$c185();
      if (s0) {
        s0 = peg$c54;
      } else {
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEOF() {
      var s0;

      var key    = peg$currPos * 75 + 74,
          cached = peg$cache[key];

      if (cached) {
        peg$currPos = cached.nextPos;
        return cached.result;
      }

      peg$reportedPos = peg$currPos;
      s0 = peg$c186();
      if (s0) {
        s0 = peg$c54;
      } else {
        s0 = peg$c0;
      }

      peg$cache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


      var ast = require('./ast');

      var sq_close_ri = ast.RenderT.HTMLABLEC(ast.FontClass.UFH(), "]", "]");

      var lst2arr = function(l) {
        var arr = [];
        while (l !== null) {
          arr.push(l.head);
          l = l.tail;
        }
        return arr;
      };

      // track all known function names, so we can give good errors for unknown
      // functions.
      var all_functions = Object.create(null);

      var arr2set = function(a, opt_set) {
        // note that the fact that all keys in the set are prefixed with '\\'
        // helps avoid accidental name conflicts.  But use Object.create(null)
        // to be extra safe.
        var set = opt_set || Object.create(null);
        a.forEach(function(v) { set[v] = all_functions[v] = true; });
        return set;
      };
      var obj2map = function(o) {
        // this just recreates the argument, but with `null` as prototype.
        var map = Object.create(null);
        Object.keys(o).forEach(function(f) {
          map[f] = o[f]; all_functions[f] = true;
        });
        return map;
      };

      // Sets of function names
      var box_functions = arr2set([
        "\\text", "\\mbox", "\\hbox", "\\vbox"
      ]);

      var latex_function_names = arr2set([
        "\\arccos", "\\arcsin", "\\arctan", "\\arg", "\\cosh", "\\cos",
        "\\cot", "\\coth", "\\csc", "\\deg", "\\det", "\\dim", "\\exp",
        "\\gcd", "\\hom", "\\inf", "\\ker", "\\lg", "\\lim", "\\liminf",
        "\\limsup", "\\ln", "\\log", "\\max", "\\min", "\\Pr", "\\sec",
        "\\sin", "\\sinh", "\\sup", "\\tan", "\\tanh"
      ]);

      var mediawiki_function_names = arr2set([
        "\\arccot", "\\arcsec", "\\arccsc", "\\sgn", "\\sen"
      ]);

      var other_literals1 = arr2set([
        "\\AA",
        "\\aleph",
        "\\alpha",
        "\\amalg",
        "\\And",
        "\\angle",
        "\\approx",
        "\\approxeq",
        "\\ast",
        "\\asymp",
        "\\backepsilon",
        "\\backprime",
        "\\backsim",
        "\\backsimeq",
        "\\barwedge",
        "\\Bbbk",
        "\\because",
        "\\beta",
        "\\beth",
        "\\between",
        "\\bigcap",
        "\\bigcirc",
        "\\bigcup",
        "\\bigodot",
        "\\bigoplus",
        "\\bigotimes",
        "\\bigsqcup",
        "\\bigstar",
        "\\bigtriangledown",
        "\\bigtriangleup",
        "\\biguplus",
        "\\bigvee",
        "\\bigwedge",
        "\\blacklozenge",
        "\\blacksquare",
        "\\blacktriangle",
        "\\blacktriangledown",
        "\\blacktriangleleft",
        "\\blacktriangleright",
        "\\bot",
        "\\bowtie",
        "\\Box",
        "\\boxdot",
        "\\boxminus",
        "\\boxplus",
        "\\boxtimes",
        "\\bullet",
        "\\bumpeq",
        "\\Bumpeq",
        "\\cap",
        "\\Cap",
        "\\cdot",
        "\\cdots",
        "\\centerdot",
        "\\checkmark",
        "\\chi",
        "\\circ",
        "\\circeq",
        "\\circlearrowleft",
        "\\circlearrowright",
        "\\circledast",
        "\\circledcirc",
        "\\circleddash",
        "\\circledS",
        "\\clubsuit",
        "\\colon",
        "\\color",
        "\\complement",
        "\\cong",
        "\\coprod",
        "\\cup",
        "\\Cup",
        "\\curlyeqprec",
        "\\curlyeqsucc",
        "\\curlyvee",
        "\\curlywedge",
        "\\curvearrowleft",
        "\\curvearrowright",
        "\\dagger",
        "\\daleth",
        "\\dashv",
        "\\ddagger",
        "\\ddots",
        "\\definecolor",
        "\\delta",
        "\\Delta",
        "\\diagdown",
        "\\diagup",
        "\\diamond",
        "\\Diamond",
        "\\diamondsuit",
        "\\digamma",
        "\\displaystyle",
        "\\div",
        "\\divideontimes",
        "\\doteq",
        "\\doteqdot",
        "\\dotplus",
        "\\dots",
        "\\dotsb",
        "\\dotsc",
        "\\dotsi",
        "\\dotsm",
        "\\dotso",
        "\\doublebarwedge",
        "\\downdownarrows",
        "\\downharpoonleft",
        "\\downharpoonright",
        "\\ell",
        "\\emptyset",
        "\\epsilon",
        "\\eqcirc",
        "\\eqsim",
        "\\eqslantgtr",
        "\\eqslantless",
        "\\equiv",
        "\\eta",
        "\\eth",
        "\\exists",
        "\\fallingdotseq",
        "\\Finv",
        "\\flat",
        "\\forall",
        "\\frown",
        "\\Game",
        "\\gamma",
        "\\Gamma",
        "\\geq",
        "\\geqq",
        "\\geqslant",
        "\\gets",
        "\\gg",
        "\\ggg",
        "\\gimel",
        "\\gnapprox",
        "\\gneq",
        "\\gneqq",
        "\\gnsim",
        "\\gtrapprox",
        "\\gtrdot",
        "\\gtreqless",
        "\\gtreqqless",
        "\\gtrless",
        "\\gtrsim",
        "\\gvertneqq",
        "\\hbar",
        "\\heartsuit",
        "\\hline",
        "\\hookleftarrow",
        "\\hookrightarrow",
        "\\hslash",
        "\\iff",
        "\\iiiint",
        "\\iiint",
        "\\iint",
        "\\Im",
        "\\imath",
        "\\implies",
        "\\in",
        "\\infty",
        "\\injlim",
        "\\int",
        "\\intercal",
        "\\iota",
        "\\jmath",
        "\\kappa",
        "\\lambda",
        "\\Lambda",
        "\\land",
        "\\ldots",
        "\\leftarrow",
        "\\Leftarrow",
        "\\leftarrowtail",
        "\\leftharpoondown",
        "\\leftharpoonup",
        "\\leftleftarrows",
        "\\leftrightarrow",
        "\\Leftrightarrow",
        "\\leftrightarrows",
        "\\leftrightharpoons",
        "\\leftrightsquigarrow",
        "\\leftthreetimes",
        "\\leq",
        "\\leqq",
        "\\leqslant",
        "\\lessapprox",
        "\\lessdot",
        "\\lesseqgtr",
        "\\lesseqqgtr",
        "\\lessgtr",
        "\\lesssim",
        "\\limits",
        "\\ll",
        "\\Lleftarrow",
        "\\lll",
        "\\lnapprox",
        "\\lneq",
        "\\lneqq",
        "\\lnot",
        "\\lnsim",
        "\\longleftarrow",
        "\\Longleftarrow",
        "\\longleftrightarrow",
        "\\Longleftrightarrow",
        "\\longmapsto",
        "\\longrightarrow",
        "\\Longrightarrow",
        "\\looparrowleft",
        "\\looparrowright",
        "\\lor",
        "\\lozenge",
        "\\Lsh",
        "\\ltimes",
        "\\lVert",
        "\\lvertneqq",
        "\\mapsto",
        "\\measuredangle",
        "\\mho",
        "\\mid",
        "\\mod",
        "\\models",
        "\\mp",
        "\\mu",
        "\\multimap",
        "\\nabla",
        "\\natural",
        "\\ncong",
        "\\nearrow",
        "\\neg",
        "\\neq",
        "\\nexists",
        "\\ngeq",
        "\\ngeqq",
        "\\ngeqslant",
        "\\ngtr",
        "\\ni",
        "\\nleftarrow",
        "\\nLeftarrow",
        "\\nleftrightarrow",
        "\\nLeftrightarrow",
        "\\nleq",
        "\\nleqq",
        "\\nleqslant",
        "\\nless",
        "\\nmid",
        "\\nolimits",
        "\\not",
        "\\notin",
        "\\nparallel",
        "\\nprec",
        "\\npreceq",
        "\\nrightarrow",
        "\\nRightarrow",
        "\\nshortmid",
        "\\nshortparallel",
        "\\nsim",
        "\\nsubseteq",
        "\\nsubseteqq",
        "\\nsucc",
        "\\nsucceq",
        "\\nsupseteq",
        "\\nsupseteqq",
        "\\ntriangleleft",
        "\\ntrianglelefteq",
        "\\ntriangleright",
        "\\ntrianglerighteq",
        "\\nu",
        "\\nvdash",
        "\\nVdash",
        "\\nvDash",
        "\\nVDash",
        "\\nwarrow",
        "\\odot",
        "\\oint",
        "\\omega",
        "\\Omega",
        "\\ominus",
        "\\oplus",
        "\\oslash",
        "\\otimes",
        "\\overbrace",
        "\\overleftarrow",
        "\\overleftrightarrow",
        "\\overline",
        "\\overrightarrow",
        "\\P",
        "\\pagecolor",
        "\\parallel",
        "\\partial",
        "\\perp",
        "\\phi",
        "\\Phi",
        "\\pi",
        "\\Pi",
        "\\pitchfork",
        "\\pm",
        "\\prec",
        "\\precapprox",
        "\\preccurlyeq",
        "\\preceq",
        "\\precnapprox",
        "\\precneqq",
        "\\precnsim",
        "\\precsim",
        "\\prime",
        "\\prod",
        "\\projlim",
        "\\propto",
        "\\psi",
        "\\Psi",
        "\\qquad",
        "\\quad",
        "\\Re",
        "\\rho",
        "\\rightarrow",
        "\\Rightarrow",
        "\\rightarrowtail",
        "\\rightharpoondown",
        "\\rightharpoonup",
        "\\rightleftarrows",
        "\\rightrightarrows",
        "\\rightsquigarrow",
        "\\rightthreetimes",
        "\\risingdotseq",
        "\\Rrightarrow",
        "\\Rsh",
        "\\rtimes",
        "\\rVert",
        "\\S",
        "\\scriptscriptstyle",
        "\\scriptstyle",
        "\\searrow",
        "\\setminus",
        "\\sharp",
        "\\shortmid",
        "\\shortparallel",
        "\\sigma",
        "\\Sigma",
        "\\sim",
        "\\simeq",
        "\\smallfrown",
        "\\smallsetminus",
        "\\smallsmile",
        "\\smile",
        "\\spadesuit",
        "\\sphericalangle",
        "\\sqcap",
        "\\sqcup",
        "\\sqsubset",
        "\\sqsubseteq",
        "\\sqsupset",
        "\\sqsupseteq",
        "\\square",
        "\\star",
        "\\subset",
        "\\Subset",
        "\\subseteq",
        "\\subseteqq",
        "\\subsetneq",
        "\\subsetneqq",
        "\\succ",
        "\\succapprox",
        "\\succcurlyeq",
        "\\succeq",
        "\\succnapprox",
        "\\succneqq",
        "\\succnsim",
        "\\succsim",
        "\\sum",
        "\\supset",
        "\\Supset",
        "\\supseteq",
        "\\supseteqq",
        "\\supsetneq",
        "\\supsetneqq",
        "\\surd",
        "\\swarrow",
        "\\tau",
        "\\textstyle",
        "\\textvisiblespace",
        "\\therefore",
        "\\theta",
        "\\Theta",
        "\\thickapprox",
        "\\thicksim",
        "\\times",
        "\\to",
        "\\top",
        "\\triangle",
        "\\triangledown",
        "\\triangleleft",
        "\\trianglelefteq",
        "\\triangleq",
        "\\triangleright",
        "\\trianglerighteq",
        "\\underbrace",
        "\\underline",
        "\\upharpoonleft",
        "\\upharpoonright",
        "\\uplus",
        "\\upsilon",
        "\\Upsilon",
        "\\upuparrows",
        "\\varepsilon",
        "\\varinjlim",
        "\\varkappa",
        "\\varliminf",
        "\\varlimsup",
        "\\varnothing",
        "\\varphi",
        "\\varpi",
        "\\varprojlim",
        "\\varpropto",
        "\\varrho",
        "\\varsigma",
        "\\varsubsetneq",
        "\\varsubsetneqq",
        "\\varsupsetneq",
        "\\varsupsetneqq",
        "\\vartheta",
        "\\vartriangle",
        "\\vartriangleleft",
        "\\vartriangleright",
        "\\vdash",
        "\\Vdash",
        "\\vDash",
        "\\vdots",
        "\\vee",
        "\\veebar",
        "\\vline",
        "\\Vvdash",
        "\\wedge",
        "\\widehat",
        "\\widetilde",
        "\\wp",
        "\\wr",
        "\\xi",
        "\\Xi",
        "\\zeta"
      ]);

      var other_literals2 = arr2set([
        "\\Coppa",
        "\\coppa",
        "\\Digamma",
        "\\euro",
        "\\geneuro",
        "\\geneuronarrow",
        "\\geneurowide",
        "\\Koppa",
        "\\koppa",
        "\\officialeuro",
        "\\Sampi",
        "\\sampi",
        "\\Stigma",
        "\\stigma",
        "\\varstigma"
      ]);

      var other_literals3 = obj2map({
        "\\C": "\\mathbb {C}",
        "\\H": "\\mathbb {H}",
        "\\N": "\\mathbb {N}",
        "\\Q": "\\mathbb {Q}",
        "\\R": "\\mathbb {R}",
        "\\Z": "\\mathbb {Z}",
        "\\alef": "\\aleph",
        "\\alefsym": "\\aleph",
        "\\Alpha": "\\mathrm {A}",
        "\\and": "\\land",
        "\\ang": "\\angle",
        "\\Beta": "\\mathrm {B}",
        "\\bull": "\\bullet",
        "\\Chi": "\\mathrm {X}",
        "\\clubs": "\\clubsuit",
        "\\cnums": "\\mathbb {C}",
        "\\Complex": "\\mathbb {C}",
        "\\Dagger": "\\ddagger",
        "\\diamonds": "\\diamondsuit",
        "\\Doteq": "\\doteqdot",
        "\\doublecap": "\\Cap",
        "\\doublecup": "\\Cup",
        "\\empty": "\\emptyset",
        "\\Epsilon": "\\mathrm {E}",
        "\\Eta": "\\mathrm {H}",
        "\\exist": "\\exists",
        "\\ge": "\\geq",
        "\\gggtr": "\\ggg",
        "\\hAar": "\\Leftrightarrow",
        "\\harr": "\\leftrightarrow",
        "\\Harr": "\\Leftrightarrow",
        "\\hearts": "\\heartsuit",
        "\\image": "\\Im",
        "\\infin": "\\infty",
        "\\Iota": "\\mathrm {I}",
        "\\isin": "\\in",
        "\\Kappa": "\\mathrm {K}",
        "\\larr": "\\leftarrow",
        "\\Larr": "\\Leftarrow",
        "\\lArr": "\\Leftarrow",
        "\\le": "\\leq",
        "\\lrarr": "\\leftrightarrow",
        "\\Lrarr": "\\Leftrightarrow",
        "\\lrArr": "\\Leftrightarrow",
        "\\Mu": "\\mathrm {M}",
        "\\natnums": "\\mathbb {N}",
        "\\ne": "\\neq",
        "\\Nu": "\\mathrm {N}",
        "\\O": "\\emptyset",
        "\\omicron": "\\mathrm {o}",
        "\\Omicron": "\\mathrm {O}",
        "\\or": "\\lor",
        "\\part": "\\partial",
        "\\plusmn": "\\pm",
        "\\rarr": "\\rightarrow",
        "\\Rarr": "\\Rightarrow",
        "\\rArr": "\\Rightarrow",
        "\\real": "\\Re",
        "\\reals": "\\mathbb {R}",
        "\\Reals": "\\mathbb {R}",
        "\\restriction": "\\upharpoonright",
        "\\Rho": "\\mathrm {P}",
        "\\sdot": "\\cdot",
        "\\sect": "\\S",
        "\\spades": "\\spadesuit",
        "\\sub": "\\subset",
        "\\sube": "\\subseteq",
        "\\supe": "\\supseteq",
        "\\Tau": "\\mathrm {T}",
        "\\thetasym": "\\vartheta",
        "\\varcoppa": "\\mbox{\\coppa}", // XXX seems to be a bug in ocaml texvc
        "\\weierp": "\\wp",
        "\\Zeta": "\\mathrm {Z}"
      });

      var big_literals = arr2set([
        "\\big",
        "\\Big",
        "\\bigg",
        "\\Bigg",
        "\\biggl",
        "\\Biggl",
        "\\biggr",
        "\\Biggr",
        "\\bigl",
        "\\Bigl",
        "\\bigr",
        "\\Bigr"
      ]);

      var other_delimiters1 = arr2set([
        "\\backslash",
        "\\downarrow",
        "\\Downarrow",
        "\\langle",
        "\\lbrace",
        "\\lceil",
        "\\lfloor",
        "\\llcorner",
        "\\lrcorner",
        "\\rangle",
        "\\rbrace",
        "\\rceil",
        "\\rfloor",
        "\\rightleftharpoons",
        "\\twoheadleftarrow",
        "\\twoheadrightarrow",
        "\\ulcorner",
        "\\uparrow",
        "\\Uparrow",
        "\\updownarrow",
        "\\Updownarrow",
        "\\urcorner",
        "\\Vert",
        "\\vert",
        "\\lbrack",
        "\\rbrack"
      ]);

      var other_delimiters2 = obj2map({
        "\\darr": "\\downarrow",
        "\\dArr": "\\Downarrow",
        "\\Darr": "\\Downarrow",
        "\\lang": "\\langle",
        "\\rang": "\\rangle",
        "\\uarr": "\\uparrow",
        "\\uArr": "\\Uparrow",
        "\\Uarr": "\\Uparrow"
      });

      var fun_ar1 = arr2set([
        "\\acute",
        "\\bar",
        "\\bcancel",
        "\\bmod",
        "\\boldsymbol",
        "\\breve",
        "\\cancel",
        "\\check",
        "\\ddot",
        "\\dot",
        "\\emph",
        "\\grave",
        "\\hat",
        //"\\mathbb", // moved to fun_ar1nb
        //"\\mathbf", // moved to fun_ar1nb
        "\\mathbin",
        "\\mathcal",
        "\\mathclose",
        "\\mathfrak",
        "\\mathit",
        "\\mathop",
        "\\mathopen",
        "\\mathord",
        "\\mathpunct",
        "\\mathrel",
        //"\\mathrm", // moved to fun_ar1nb
        "\\mathsf",
        "\\mathtt",
        //"\\operatorname", // already exists in fun_ar1nb
        "\\pmod",
        "\\sqrt",
        "\\textbf",
        "\\textit",
        "\\textrm",
        "\\textsf",
        "\\texttt",
        "\\tilde",
        "\\vec",
        "\\xcancel",
        "\\xleftarrow",
        "\\xrightarrow"
      ]);

      var other_fun_ar1 = obj2map({
        "\\Bbb": "\\mathbb",
        "\\bold": "\\mathbf"
      });

      var fun_ar1nb = arr2set([
        "\\operatorname",
        "\\mathbb",
        "\\mathbf",
        "\\mathrm"
      ]);

      var fun_ar1opt = arr2set([
        "\\sqrt", "\\xleftarrow", "\\xrightarrow"
      ]);

      var fun_ar2 = arr2set([
        "\\binom",
        "\\cancelto",
        "\\cfrac",
        "\\dbinom",
        "\\dfrac",
        "\\frac",
        "\\overset",
        "\\stackrel",
        "\\tbinom",
        "\\tfrac",
        "\\underset"
      ]);

      var fun_ar2nb = arr2set([
        "\\sideset"
      ]);

      var fun_infix = arr2set([
        "\\atop",
        "\\choose",
        "\\over"
      ]);

      var declh_function = arr2set([
        "\\rm",
        "\\it",
        "\\cal",
        "\\bf"
      ]);

      var left_function = arr2set([ "\\left" ]);
      var right_function = arr2set([ "\\right" ]);


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();